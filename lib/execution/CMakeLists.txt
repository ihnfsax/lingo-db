set(EXECUTION_FILES ResultProcessor.cpp EnforceCABIPass.cpp AnnotateProfilingDataPass.cpp Frontend.cpp LLVMBackends.cpp Execution.cpp BackendPasses.cpp CEmitter.cpp CBackend.cpp BareFunctions.cpp)
if(ENABLE_CRANELIFT_BACKEND)
    list(APPEND EXECUTION_FILES CraneliftBackend.cpp DecomposeTuplePass.cpp)
endif(ENABLE_CRANELIFT_BACKEND)
add_library(runner ${EXECUTION_FILES})
llvm_update_compile_flags(runner)
target_link_libraries(runner PRIVATE ${LIBS} MLIRSQLFrontend PUBLIC pg_query::pg_query PRIVATE tbb)
set(COMPILE_DEFS "SOURCE_DIR=\"${CMAKE_SOURCE_DIR}\"")
list(APPEND COMPILE_DEFS " DEPENDENCY_INCLUDES=\"-I ${ARROW_INCLUDE_DIR} -I ${TBB_INCLUDE_DIR}\"")
if(ENABLE_CRANELIFT_BACKEND)
    list(APPEND COMPILE_DEFS " CRANELIFT_ENABLED=1")
else()
    list(APPEND COMPILE_DEFS " CRANELIFT_ENABLED=0")
endif(ENABLE_CRANELIFT_BACKEND)
if (COMPILE_FOR_PERF)
    list(APPEND COMPILE_DEFS " RUN_QUERIES_WITH_PERF=1")
else()
    list(APPEND COMPILE_DEFS " RUN_QUERIES_WITH_PERF=0")
endif (COMPILE_FOR_PERF)
message(STATUS "Runner compile defs: ${COMPILE_DEFS}")
target_compile_definitions(runner PRIVATE ${COMPILE_DEFS} )
